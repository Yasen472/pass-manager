import React, { useState } from 'react';
import axios from 'axios';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/authContext.js';

const Verify2FA = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { qrCodeUrl, userId, token: authToken } = location.state || {}; // Ensure userId and token are passed in state
  const [twofaToken, setTwofaToken] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const {isLoggedIn} = useAuth();

  const handleTokenChange = (e) => {
    setTwofaToken(e.target.value);
  };

  const handleVerify2FA = async () => {
    // Debugging before sending request
    console.log("Starting 2FA verification...");
    console.log("User ID: ", userId);
    console.log("Entered Token: ", twofaToken);
    console.log("Auth Token: ", authToken); // Log the authorization token being sent in the request

    try {
      const userInputTime = Date.now();
      console.log(userInputTime)
      const response = await axios.post(
        `${process.env.REACT_APP_AUTH_URL}/verify-2fa`,
        { userId, token: twofaToken, userInputTime }, // Send userId and 2FA token
        { headers: { Authorization: `Bearer ${authToken}` } } // Auth token if required
      );

      console.log("Response from server:", response); // Log the full response from the server

      if (response.status === 200) {
        // 2FA verification was successful
        console.log("2FA verification successful. Redirecting to dashboard...");
        
        navigate('/dashboard'); // Redirect to a protected page after verification
      }
    } catch (error) {
      // More detailed error logging
      console.error('Error during 2FA verification:', error);
      if (error.response) {
        console.log("Error response status:", error.response.status);
        console.log("Error response data:", error.response.data);
      } else if (error.request) {
        console.log("Error request:", error.request);
      } else {
        console.log("Error message:", error.message);
      }

      setErrorMessage('Invalid 2FA token. Please try again.');
    }
  };

  return (
    <div className="verify-2fa">
      <h3>Scan the QR Code with Google Authenticator</h3>
      {qrCodeUrl ? (
        <img src={qrCodeUrl} alt="QR Code for 2FA" />
      ) : (
        <p>QR Code not available. Please try again.</p>
      )}
      <p>After scanning, enter the 2FA token generated by Google Authenticator below.</p>
      
      <input
        type="text"
        placeholder="Enter 2FA token"
        value={twofaToken}
        onChange={handleTokenChange}
      />
      <button onClick={handleVerify2FA}>Verify</button>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
    </div>
  );
};

export default Verify2FA;
