import React, { useState } from 'react';
import axios from 'axios';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/authContext.js';
import './verify2fa.css'

const Verify2FA = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { qrCodeUrl, userId, token: authToken } = location.state || {}; // Ensure userId and token are passed in state
  const [twofaToken, setTwofaToken] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const { isLoggedIn, login } = useAuth(); // Destructure login from useAuth

  const handleTokenChange = (e) => {
    setTwofaToken(e.target.value);
  };
 
  const handleVerify2FA = async () => {
    debugger;
    console.log("Starting 2FA verification...");
    console.log("User ID: ", userId);
    console.log("Entered Token: ", twofaToken);
    console.log("Auth Token: ", authToken); // Log the authorization token being sent in the request

    try {

      
      const response = await axios.post(
        `${process.env.REACT_APP_AUTH_URL}/verify-2fa`,
        { userId, token: twofaToken }, // Send userId and 2FA token
        { headers: { Authorization: `Bearer ${authToken}` } } // Auth token if required
      );

      console.log("Response from server:", response);

      if (response.status === 200) {
        console.log("2FA verification successful. Redirecting to dashboard...");

        // Destructure user data and token from the server response
        // const { user, email, token, id } = response.data; - old
        const { user, email, id } = response.data;

        // Invoke login function to update the authentication context
        login(id, user, email, '', authToken); // Pass user details and token to login
        navigate('/accounts'); // Redirect to a protected page after verification
      }
    } catch (error) {
      console.error('Error during 2FA verification:', error);
      if (error.response) {
        console.log("Error response status:", error.response.status);
        console.log("Error response data:", error.response.data);
      } else if (error.request) {
        console.log("Error request:", error.request);
      } else {
        console.log("Error message:", error.message);
      }

      setErrorMessage('Invalid 2FA token. Please try again.');
    }
  };

  return (
    <div className="verify-2fa">
      <h3>Scan the QR Code with Google Authenticator</h3>
      {qrCodeUrl ? (
        <img src={qrCodeUrl} alt="QR Code for 2FA" />
      ) : (
        <p>QR Code not available. Please try again.</p>
      )}
      <p>After scanning, enter the 2FA token generated by Google Authenticator below.</p>
      <div className="verification-container">
      <input
        type="text"
        placeholder="Enter 2FA token"
        value={twofaToken}
        onChange={handleTokenChange}
        className="input-2fa-code"
      />
      <button className="verify-btn" onClick={handleVerify2FA}>Verify</button>
      {errorMessage && <p className="error-message">{errorMessage}</p>}
      </div>
    </div>
  );
};

export default Verify2FA;

